# Rediriger tout le trafic HTTP vers HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name _;
    return 301 https://$host$request_uri;
}

# Configuration HTTPS
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name _;

    # Certificats SSL
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    # Configuration SSL optimisée
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    # Ajouter des logs d'erreur détaillés
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;

    # Proxy vers l'application Node.js
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        
        # Configuration WebSocket
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts plus longs pour WebRTC
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;

        # Empty page pour le certificat de test
        default_type text/html;
        return 200 '<html><body><h1>You are connected to a dummy page</h1></body></html>';
    }

    # Route spécifique pour CORS (si nécessaire pour une API publique)
    location /auth/ {
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type";
        proxy_pass http://127.0.0.1:3000;
    }
}